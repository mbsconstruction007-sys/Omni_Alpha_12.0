apiVersion: apps/v1
kind: Deployment
metadata:
  name: omni-alpha-trading
  namespace: trading-prod
  labels:
    app: omni-alpha
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: omni-alpha
  template:
    metadata:
      labels:
        app: omni-alpha
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
    spec:
      containers:
      - name: trading-engine
        image: omni-alpha:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8000
          name: metrics
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        env:
        - name: ENVIRONMENT
          value: "PRODUCTION"
        - name: LOG_LEVEL
          value: "INFO"
        - name: REDIS_HOST
          value: "redis-service"
        - name: DB_HOST
          value: "postgres-service"
        - name: KAFKA_BROKERS
          value: "kafka-service:9092"
        envFrom:
        - secretRef:
            name: trading-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /var/log/trading
        - name: config
          mountPath: /app/config
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: trading-logs-pvc
      - name: config
        configMap:
          name: trading-config
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: omni-alpha-service
  namespace: trading-prod
  labels:
    app: omni-alpha
spec:
  selector:
    app: omni-alpha
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8080
  - name: metrics
    protocol: TCP
    port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: omni-alpha-ingress
  namespace: trading-prod
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - trading.omnialpha.com
    secretName: trading-tls
  rules:
  - host: trading.omnialpha.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: omni-alpha-service
            port:
              number: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: trading-config
  namespace: trading-prod
data:
  config.yaml: |
    trading:
      max_daily_loss: 50000
      max_position_size: 100000
      max_open_positions: 50
      circuit_breaker_reset_hours: 4
    
    monitoring:
      health_check_interval: 30
      metrics_port: 8000
      alert_channels:
        - telegram
        - email
    
    deployment:
      canary_percent: 10
      blue_green_enabled: true
      rollback_threshold: 0.05
---
apiVersion: v1
kind: Secret
metadata:
  name: trading-secrets
  namespace: trading-prod
type: Opaque
data:
  TELEGRAM_BOT_TOKEN: # base64 encoded
  ALPACA_API_KEY: # base64 encoded
  ALPACA_SECRET_KEY: # base64 encoded
  DB_PASSWORD: # base64 encoded
  REDIS_PASSWORD: # base64 encoded
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: trading-logs-pvc
  namespace: trading-prod
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: omni-alpha-hpa
  namespace: trading-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: omni-alpha-trading
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
